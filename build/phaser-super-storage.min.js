(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["PhaserSuperStorage"] = factory();
	else
		root["PhaserSuperStorage"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 5);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return StorageCommand; });
class StorageUtils {
    static isLocalStorageSupport() {
        try {
            if (typeof localStorage === 'object') {
                localStorage.setItem('testingLocalStorage', 'foo');
                localStorage.removeItem('testingLocalStorage');
                return true;
            }
        }
        catch (e) {
            return false;
        }
        return false;
    }
    static validateMessage(data) {
        if (data.hasOwnProperty('command')) {
            return data;
        }
        return null;
    }
    static nameSpaceKeyFilter(keys, namespace) {
        return keys.filter((keyName) => {
            return (keyName.substring(0, namespace.length) === namespace);
        });
    }
}
/* harmony export (immutable) */ __webpack_exports__["b"] = StorageUtils;

var StorageCommand;
(function (StorageCommand) {
    StorageCommand[StorageCommand["init"] = 0] = "init";
    StorageCommand[StorageCommand["setItem"] = 1] = "setItem";
    StorageCommand[StorageCommand["getItem"] = 2] = "getItem";
    StorageCommand[StorageCommand["removeItem"] = 3] = "removeItem";
    StorageCommand[StorageCommand["clear"] = 4] = "clear";
    StorageCommand[StorageCommand["setNamespace"] = 5] = "setNamespace";
    StorageCommand[StorageCommand["length"] = 6] = "length";
    StorageCommand[StorageCommand["key"] = 7] = "key";
    StorageCommand[StorageCommand["error"] = 8] = "error";
})(StorageCommand || (StorageCommand = {}));


/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * Storage driver for cookies
 */
class CookieStorage {
    constructor(spacedName = '') {
        this.namespace = '';
        this.forcePromises = false;
        this.setNamespace(spacedName);
    }
    get length() {
        return (this.getNameSpaceMatches() !== null) ? this.getNameSpaceMatches().length : 0;
    }
    key(n) {
        let key = this.getNameSpaceMatches()[n];
        let result = this.getCookiesForNameSpace()[key] || null;
        if (this.forcePromises) {
            return this.promisefy(result);
        }
        return result;
    }
    getItem(key) {
        let result = this.getCookiesForNameSpace()[key] || null;
        if (this.forcePromises) {
            return this.promisefy(result);
        }
        return result;
    }
    setItem(key, value) {
        document.cookie = encodeURIComponent(this.namespace + key) + '=' + encodeURIComponent(value) + '; expires=Tue, 19 Jan 2038 03:14:07 GMT; path=/';
        if (this.forcePromises) {
            return this.promisefy(null);
        }
    }
    removeItem(key) {
        document.cookie = encodeURIComponent(this.namespace + key) + '=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/';
        if (this.forcePromises) {
            return this.promisefy(null);
        }
    }
    clear() {
        let cookies = this.getCookiesForNameSpace();
        for (let key in cookies) {
            if (cookies.hasOwnProperty(key)) {
                this.removeItem(key);
            }
        }
        if (this.forcePromises) {
            return this.promisefy(null);
        }
    }
    setNamespace(namespace) {
        if (namespace) {
            this.namespace = namespace + ':';
            this.reg = new RegExp('^' + this.namespace + '[a-zA-Z0-9]*', 'g');
        }
        if (this.forcePromises) {
            return this.promisefy(namespace);
        }
    }
    getNameSpaceMatches() {
        let cookies = decodeURIComponent(document.cookie).split('; ');
        return cookies.filter((val) => {
            return (val.match(this.reg) !== null) ? val.match(this.reg).length > 0 : false;
        });
    }
    getCookiesForNameSpace() {
        let cookies = {};
        this.getNameSpaceMatches().forEach((cookie) => {
            let temp = cookie.replace(this.namespace, '').split('=');
            cookies[temp[0]] = temp[1];
        });
        return cookies;
    }
    promisefy(value) {
        return new Promise((resolve) => {
            resolve(value);
        });
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = CookieStorage;



/***/ }),
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * Storage driver for browser's localStorage
 */
class CordovaStorage {
    // Due to async /w promise it is not possible to pass namespace in constructor
    constructor() {
        this.namespace = '';
        this.keys = [];
    }
    get forcePromises() {
        return true;
    }
    get length() {
        return this.keys.length;
    }
    key(n) {
        return this.promisefy(this.keys[n]);
    }
    getItem(key) {
        return new Promise((resolve, reject) => {
            NativeStorage.getItem(this.namespace + key, (value) => {
                resolve(value);
            }, (error) => {
                if (error.code === 2) {
                    resolve(null);
                }
                else {
                    reject(error);
                }
            });
        });
    }
    setItem(key, value) {
        if (key.length < 1) {
            console.error('CordovaStorage: Key cannot be an empty string!');
            return;
        }
        return new Promise((resolve, reject) => {
            NativeStorage.setItem(this.namespace + key, value, () => {
                if (this.keys.indexOf(key) < 0) {
                    this.keys.push(key);
                    this.save();
                }
                resolve(null);
            }, (error) => {
                reject(error);
            });
        });
    }
    removeItem(key) {
        return new Promise((resolve, reject) => {
            NativeStorage.remove(this.namespace + key, () => {
                let id = this.keys.indexOf(key);
                if (id >= 0) {
                    this.keys.splice(id, 1);
                    this.save();
                }
                resolve(null);
            }, (error) => {
                reject(error);
            });
        });
    }
    clear() {
        return new Promise((resolve, reject) => {
            let counter = 0;
            for (let i = 0; i < this.keys.length; i++) {
                NativeStorage.remove(this.namespace + this.keys[i], () => {
                    if (++counter >= this.keys.length) {
                        this.keys = [];
                        this.save();
                        resolve(null);
                    }
                }, (error) => {
                    reject(error);
                });
            }
        });
    }
    setNamespace(spacedName = '') {
        this.namespace = spacedName + ':';
        this.keys = [];
        return new Promise((resolve) => {
            this.load().then(resolve).catch(resolve);
        });
    }
    promisefy(value) {
        return new Promise((resolve) => {
            resolve(value);
        });
    }
    load() {
        return new Promise((resolve, reject) => {
            NativeStorage.getItem(this.namespace, (value) => {
                this.keys = JSON.parse(value);
                resolve(null);
            }, (error) => {
                reject(error);
            });
        });
    }
    save() {
        NativeStorage.setItem(this.namespace, JSON.stringify(this.keys), () => {
            return;
        }, () => {
            console.warn('CordovaStorage: Failed to save keys of namespace.');
        });
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = CordovaStorage;



/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Utils_Storage__ = __webpack_require__(0);

/**
 * Storage driver for browser's localStorage
 */
class LocalStorage {
    constructor(spacedName = '') {
        this.namespace = '';
        this.forcePromises = false;
        this.setNamespace(spacedName);
    }
    get length() {
        let keys = Object.keys(localStorage);
        return __WEBPACK_IMPORTED_MODULE_0__Utils_Storage__["b" /* StorageUtils */].nameSpaceKeyFilter(keys, this.namespace).length;
    }
    key(n) {
        return this.forcePromises ?
            this.promisefy(this._key, arguments) :
            this._key(n);
    }
    _key(n) {
        let keys = Object.keys(localStorage);
        let spacedKeys = __WEBPACK_IMPORTED_MODULE_0__Utils_Storage__["b" /* StorageUtils */].nameSpaceKeyFilter(keys, this.namespace);
        let item = localStorage.getItem(spacedKeys[n]);
        return item;
    }
    getItem(key) {
        return this.forcePromises ?
            this.promisefy(this._getItem, arguments) :
            this._getItem(key);
    }
    _getItem(key) {
        return localStorage.getItem(this.namespace + key);
    }
    setItem(key, value) {
        return this.forcePromises ?
            this.promisefy(this._setItem, arguments) :
            this._setItem(key, value);
    }
    _setItem(key, value) {
        return localStorage.setItem(this.namespace + key, value);
    }
    removeItem(key) {
        return this.forcePromises ?
            this.promisefy(this._removeItem, arguments) :
            this._removeItem(key);
    }
    _removeItem(key) {
        return localStorage.removeItem(this.namespace + key);
    }
    clear() {
        return this.forcePromises ?
            this.promisefy(this._clear, arguments) :
            this._clear();
    }
    _clear() {
        let keys = Object.keys(localStorage);
        let spacedKeys = __WEBPACK_IMPORTED_MODULE_0__Utils_Storage__["b" /* StorageUtils */].nameSpaceKeyFilter(keys, this.namespace);
        for (let i = 0; i < spacedKeys.length; i++) {
            localStorage.removeItem(spacedKeys[i]);
        }
        return;
    }
    setNamespace(spacedName) {
        return this.forcePromises ?
            this.promisefy(this._setNameSpace, arguments) :
            this._setNameSpace(spacedName);
    }
    _setNameSpace(spacedName) {
        if (spacedName) {
            this.namespace = spacedName + ':';
        }
    }
    promisefy(value, args) {
        return new Promise((resolve) => {
            resolve(value.apply(this, args));
        });
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = LocalStorage;



/***/ }),
/* 4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Utils_Storage__ = __webpack_require__(0);

/**
 * Storage driver for browser's localStorage
 */
class IframeStorage {
    constructor(spacedName = '', expectedOrigin = '*') {
        this.namespace = '';
        this.expectedOrigin = '';
        this.storageLength = 0;
        this.enabled = false;
        if (spacedName !== '') {
            this.setNamespace(spacedName);
        }
        this.expectedOrigin = expectedOrigin;
    }
    get forcePromises() {
        return true;
    }
    get length() {
        return this.storageLength;
    }
    init() {
        return this.sendMessage({
            command: __WEBPACK_IMPORTED_MODULE_0__Utils_Storage__["a" /* StorageCommand */].init
        }).then(() => {
            this.enabled = true;
        });
    }
    key(n) {
        return this.sendMessage({
            command: __WEBPACK_IMPORTED_MODULE_0__Utils_Storage__["a" /* StorageCommand */].key,
            value: n
        });
    }
    getItem(key) {
        return this.sendMessage({
            command: __WEBPACK_IMPORTED_MODULE_0__Utils_Storage__["a" /* StorageCommand */].getItem,
            key: key
        });
    }
    setItem(key, value) {
        return this.sendMessage({
            command: __WEBPACK_IMPORTED_MODULE_0__Utils_Storage__["a" /* StorageCommand */].setItem,
            key: key,
            value: value
        });
    }
    removeItem(key) {
        return this.sendMessage({
            command: __WEBPACK_IMPORTED_MODULE_0__Utils_Storage__["a" /* StorageCommand */].removeItem,
            key: key
        });
    }
    clear() {
        return this.sendMessage({
            command: __WEBPACK_IMPORTED_MODULE_0__Utils_Storage__["a" /* StorageCommand */].clear
        });
    }
    setNamespace(spacedName) {
        return this.sendMessage({
            command: __WEBPACK_IMPORTED_MODULE_0__Utils_Storage__["a" /* StorageCommand */].setNamespace,
            value: spacedName
        });
    }
    sendMessage(message) {
        let returnedResult;
        if (message.command === __WEBPACK_IMPORTED_MODULE_0__Utils_Storage__["a" /* StorageCommand */].init) {
            returnedResult = false;
        }
        let messageChannel = new MessageChannel();
        return new Promise((resolve, reject) => {
            if (!this.enabled && message.command !== __WEBPACK_IMPORTED_MODULE_0__Utils_Storage__["a" /* StorageCommand */].init) {
                reject('Messaging not enabled!');
            }
            if (message.command === __WEBPACK_IMPORTED_MODULE_0__Utils_Storage__["a" /* StorageCommand */].init) {
                //small timeout to see if stuff is enabled
                setTimeout(() => {
                    if (!returnedResult) {
                        reject('Unable to get a response in time');
                    }
                }, 1000);
            }
            messageChannel.port1.onmessage = (event) => {
                console.log('Frame received message', event);
                let receivedMessage = __WEBPACK_IMPORTED_MODULE_0__Utils_Storage__["b" /* StorageUtils */].validateMessage(event.data);
                if (receivedMessage.command === __WEBPACK_IMPORTED_MODULE_0__Utils_Storage__["a" /* StorageCommand */].init) {
                    returnedResult = true;
                }
                if (receivedMessage.status === undefined || receivedMessage.status !== 'ok') {
                    reject(receivedMessage.value);
                }
                if (receivedMessage.length !== undefined) {
                    this.storageLength = receivedMessage.length;
                }
                switch (receivedMessage.command) {
                    case __WEBPACK_IMPORTED_MODULE_0__Utils_Storage__["a" /* StorageCommand */].setNamespace:
                        this.namespace = receivedMessage.value + ':';
                        resolve(receivedMessage.value);
                        break;
                    case __WEBPACK_IMPORTED_MODULE_0__Utils_Storage__["a" /* StorageCommand */].getItem:
                    case __WEBPACK_IMPORTED_MODULE_0__Utils_Storage__["a" /* StorageCommand */].length:
                    case __WEBPACK_IMPORTED_MODULE_0__Utils_Storage__["a" /* StorageCommand */].key:
                        resolve(receivedMessage.value);
                        break;
                    case __WEBPACK_IMPORTED_MODULE_0__Utils_Storage__["a" /* StorageCommand */].setItem:
                    case __WEBPACK_IMPORTED_MODULE_0__Utils_Storage__["a" /* StorageCommand */].removeItem:
                    case __WEBPACK_IMPORTED_MODULE_0__Utils_Storage__["a" /* StorageCommand */].clear:
                    case __WEBPACK_IMPORTED_MODULE_0__Utils_Storage__["a" /* StorageCommand */].init:
                        resolve(receivedMessage.status);
                        break;
                    default:
                        reject(receivedMessage.value);
                        break;
                }
            };
            if (this.enabled || message.command === __WEBPACK_IMPORTED_MODULE_0__Utils_Storage__["a" /* StorageCommand */].init) {
                console.log('Sending message to parent: ', message);
                window.parent.postMessage(message, this.expectedOrigin, [messageChannel.port2]);
            }
        });
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = IframeStorage;



/***/ }),
/* 5 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__StorageAdapters__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Utils_Storage__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__StorageAdapters_CookieStorage__ = __webpack_require__(1);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "CookieStorage", function() { return __WEBPACK_IMPORTED_MODULE_2__StorageAdapters_CookieStorage__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__StorageAdapters_CordovaStorage__ = __webpack_require__(2);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "CordovaStorage", function() { return __WEBPACK_IMPORTED_MODULE_3__StorageAdapters_CordovaStorage__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__StorageAdapters_LocalStorage__ = __webpack_require__(3);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "LocalStorage", function() { return __WEBPACK_IMPORTED_MODULE_4__StorageAdapters_LocalStorage__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__StorageAdapters_IframeStorage__ = __webpack_require__(4);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "IframeStorage", function() { return __WEBPACK_IMPORTED_MODULE_5__StorageAdapters_IframeStorage__["a"]; });






class PhaserSuperStorage {
    constructor(scene) {
        //  The Scene that owns this plugin
        this.scene = scene;
        if (!this.scene.sys.settings.isBooted) {
            this.scene.sys.events.once('boot', () => this.boot);
        }
    }
    static register(manager) {
        manager.register('PhaserSuperStorage', PhaserSuperStorage, 'storage');
    }
    boot() {
        if (__WEBPACK_IMPORTED_MODULE_1__Utils_Storage__["b" /* StorageUtils */].isLocalStorageSupport()) {
            this.setAdapter(new __WEBPACK_IMPORTED_MODULE_0__StorageAdapters__["b" /* LocalStorage */]());
        }
        else {
            this.setAdapter(new __WEBPACK_IMPORTED_MODULE_0__StorageAdapters__["a" /* CookieStorage */]());
        }
    }
    setAdapter(storageAdapter) {
        this.storage = storageAdapter;
    }
    get forcePromises() {
        return this.storage.forcePromises;
    }
    set forcePromises(forceIt) {
        this.storage.forcePromises = forceIt;
    }
    get length() {
        if (this.storage === null) {
            return 0;
        }
        return this.storage.length;
    }
    setNamespace(namedSpace) {
        if (this.storage !== null) {
            return this.storage.setNamespace(namedSpace);
        }
    }
    key(n) {
        if (this.storage === null) {
            return '';
        }
        return this.storage.key(n);
    }
    getItem(key) {
        if (this.storage === null) {
            return null;
        }
        return this.storage.getItem(key);
    }
    setItem(key, value) {
        if (this.storage !== null) {
            return this.storage.setItem(key, value);
        }
    }
    removeItem(key) {
        if (this.storage !== null) {
            return this.storage.removeItem(key);
        }
    }
    clear() {
        if (this.storage !== null) {
            return this.storage.clear();
        }
    }
}
/* harmony export (immutable) */ __webpack_exports__["default"] = PhaserSuperStorage;



/***/ }),
/* 6 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__CookieStorage__ = __webpack_require__(1);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_0__CookieStorage__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__CordovaStorage__ = __webpack_require__(2);
/* unused harmony reexport CordovaStorage */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__LocalStorage__ = __webpack_require__(3);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return __WEBPACK_IMPORTED_MODULE_2__LocalStorage__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__IframeStorage__ = __webpack_require__(4);
/* unused harmony reexport IframeStorage */






/***/ })
/******/ ]);
});
//# sourceMappingURL=phaser-super-storage.min.js.map